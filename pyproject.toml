[build-system]
requires = ["hatchling>=1.26", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "usv-playpen"
authors = [
    { name = "@bartulem", email = "mimica.bartul@gmail.com" }
]
description = "GUI/CLI to conduct, process and analyze experiments w/ multichannel e-phys, audio and video acquisition"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = "==3.10.*"
keywords = ["neuroscience", "mouse", "usv", "behavior", "social", "courtship"]
classifiers = [
    "Development Status :: Alpha",
    "Intended Audience :: Experimental Neuroscientists",
    "Topic :: Running ana Analyzing Behavioral and Neural Experiments",
    "License :: OSI Approved :: GNU General Public License v3.0",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only"
]
dynamic = ["version"]
dependencies = [
    'astropy',
    'av',
    'click',
    'h5py',
    'imgstore',
    'joblib',
    'librosa',
    'matplotlib',
    'noisereduce',
    'numpy',
    'numba',
    'opencv-contrib-python',
    'pandas',
    'PIMS',
    'PyQt6',
    'polars',
    'pydub',
    'requests',
    'scipy',
    'sleap-anipose',
    'scikit-learn',
    'toml',
    'tqdm'
]

[project.urls]
Homepage = "https://github.com/bartulem/usv_playpen"
"Bug Tracker" = "https://github.com/bartulem/usv_playpen/issues"
Discussions = "https://github.com/bartulem/usv_playpen/discussions"
Changelog = "https://github.com/bartulem/usv_playpen/releases"

[dependency-groups]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  { include-group = "test" },
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

#[tool.setuptools.package-data]
#usv_playpen = [
#    "img/*.png",
#    "fonts/*.ttf",
#    "_config/*",
#    "_parameter_settings/*.json",
#    "other/cluster/*/*",
#    "other/playback/*.py",
#    "other/synchronization/*.ino"
#]

[project.entry-points.console_scripts]
usv-playpen = "usv_playpen.usv_playpen_gui:main"
conduct-calibration = "usv_playpen.behavioral_experiments:conduct_calibration_cli"
conduct-recording = "usv_playpen.behavioral_experiments:conduct_recording_cli"
concatenate-video-files = "usv_playpen.preprocess_data:concatenate_video_files_cli"
rectify-video-fps = "usv_playpen.preprocess_data:rectify_video_fps_cli"
multichannel-to-single-ch = "usv_playpen.preprocess_data:multichannel_to_channel_audio_cli"
crop-wav-files = "usv_playpen.preprocess_data:crop_wav_files_to_video_cli"
av-sync-check = "usv_playpen.preprocess_data:av_sync_check_cli"
ev-sync-check = "usv_playpen.preprocess_data:ev_sync_check_cli"
hpss-audio = "usv_playpen.preprocess_data:hpss_audio_cli"
bp-filter-audio = "usv_playpen.preprocess_data:bp_filter_audio_files_cli"
concatenate-audio-files = "usv_playpen.preprocess_data:concatenate_audio_files_cli"
sleap-to-h5 = "usv_playpen.preprocess_data:sleap_file_conversion_cli"
anipose-calibrate = "usv_playpen.preprocess_data:conduct_anipose_calibration_cli"
anipose-triangulate = "usv_playpen.preprocess_data:conduct_anipose_triangulation_cli"
anipose-trm = "usv_playpen.preprocess_data:translate_rotate_metric_cli"
das-infer = "usv_playpen.preprocess_data:das_command_line_inference_cli"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/usv_playpen/_version.py"

[tool.hatch.envs.default]
# duplicate for now since hatch doesn't support groups yet
dependencies = []
scripts.test = "pytest {args}"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["usv_playpen"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "usv_playpen.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "EXE",      # flake8-executable
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["usv_playpen._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

